Help on class LSTM in module keras.src.layers.rnn.lstm:

class LSTM(keras.src.layers.rnn.rnn.RNN)
 |  LSTM(*args, **kwargs)
 |  
 |  Long Short-Term Memory layer - Hochreiter 1997.
 |  
 |  Based on available runtime hardware and constraints, this layer
 |  will choose different implementations (cuDNN-based or backend-native)
 |  to maximize the performance. If a GPU is available and all
 |  the arguments to the layer meet the requirement of the cuDNN kernel
 |  (see below for details), the layer will use a fast cuDNN implementation
 |  when using the TensorFlow backend.
 |  The requirements to use the cuDNN implementation are:
 |  
 |  1. `activation` == `tanh`
 |  2. `recurrent_activation` == `sigmoid`
 |  3. `dropout` == 0 and `recurrent_dropout` == 0
 |  4. `unroll` is `False`
 |  5. `use_bias` is `True`
 |  6. Inputs, if use masking, are strictly right-padded.
 |  7. Eager execution is enabled in the outermost context.
 |  
 |  For example:
 |  
 |  >>> inputs = np.random.random((32, 10, 8))
 |  >>> lstm = keras.layers.LSTM(4)
 |  >>> output = lstm(inputs)
 |  >>> output.shape
 |  (32, 4)
 |  >>> lstm = keras.layers.LSTM(
 |  ...     4, return_sequences=True, return_state=True)
 |  >>> whole_seq_output, final_memory_state, final_carry_state = lstm(inputs)
 |  >>> whole_seq_output.shape
 |  (32, 10, 4)
 |  >>> final_memory_state.shape
 |  (32, 4)
 |  >>> final_carry_state.shape
 |  (32, 4)
 |  
 |  Args:
 |      units: Positive integer, dimensionality of the output space.
 |      activation: Activation function to use.
 |          Default: hyperbolic tangent (`tanh`).
 |          If you pass `None`, no activation is applied
 |          (ie. "linear" activation: `a(x) = x`).
 |      recurrent_activation: Activation function to use
 |          for the recurrent step.
 |          Default: sigmoid (`sigmoid`).
 |          If you pass `None`, no activation is applied
 |          (ie. "linear" activation: `a(x) = x`).
 |      use_bias: Boolean, (default `True`), whether the layer
 |          should use a bias vector.
 |      kernel_initializer: Initializer for the `kernel` weights matrix,
 |          used for the linear transformation of the inputs. Default:
 |          `"glorot_uniform"`.
 |      recurrent_initializer: Initializer for the `recurrent_kernel`
 |          weights matrix, used for the linear transformation of the recurrent
 |          state. Default: `"orthogonal"`.
 |      bias_initializer: Initializer for the bias vector. Default: `"zeros"`.
 |      unit_forget_bias: Boolean (default `True`). If `True`,
 |          add 1 to the bias of the forget gate at initialization.
 |          Setting it to `True` will also force `bias_initializer="zeros"`.
 |          This is recommended in [Jozefowicz et al.](
 |          https://github.com/mlresearch/v37/blob/gh-pages/jozefowicz15.pdf)
 |      kernel_regularizer: Regularizer function applied to the `kernel` weights
 |          matrix. Default: `None`.
 |      recurrent_regularizer: Regularizer function applied to the
 |          `recurrent_kernel` weights matrix. Default: `None`.
 |      bias_regularizer: Regularizer function applied to the bias vector.
 |          Default: `None`.
 |      activity_regularizer: Regularizer function applied to the output of the
 |          layer (its "activation"). Default: `None`.
 |      kernel_constraint: Constraint function applied to the `kernel` weights
 |          matrix. Default: `None`.
 |      recurrent_constraint: Constraint function applied to the
 |          `recurrent_kernel` weights matrix. Default: `None`.
 |      bias_constraint: Constraint function applied to the bias vector.
 |          Default: `None`.
 |      dropout: Float between 0 and 1. Fraction of the units to drop for the
 |          linear transformation of the inputs. Default: 0.
 |      recurrent_dropout: Float between 0 and 1. Fraction of the units to drop
 |          for the linear transformation of the recurrent state. Default: 0.
 |      seed: Random seed for dropout.
 |      return_sequences: Boolean. Whether to return the last output
 |          in the output sequence, or the full sequence. Default: `False`.
 |      return_state: Boolean. Whether to return the last state in addition
 |          to the output. Default: `False`.
 |      go_backwards: Boolean (default: `False`).
 |          If `True`, process the input sequence backwards and return the
 |          reversed sequence.
 |      stateful: Boolean (default: `False`). If `True`, the last state
 |          for each sample at index i in a batch will be used as initial
 |          state for the sample of index i in the following batch.
 |      unroll: Boolean (default False).
 |          If `True`, the network will be unrolled,
 |          else a symbolic loop will be used.
 |          Unrolling can speed-up a RNN,
 |          although it tends to be more memory-intensive.
 |          Unrolling is only suitable for short sequences.
 |  
 |  Call arguments:
 |      inputs: A 3D tensor, with shape `(batch, timesteps, feature)`.
 |      mask: Binary tensor of shape `(samples, timesteps)` indicating whether
 |          a given timestep should be masked  (optional).
 |          An individual `True` entry indicates that the corresponding timestep
 |          should be utilized, while a `False` entry indicates that the
 |          corresponding timestep should be ignored. Defaults to `None`.
 |      training: Python boolean indicating whether the layer should behave in
 |          training mode or in inference mode. This argument is passed to the
 |          cell when calling it. This is only relevant if `dropout` or
 |          `recurrent_dropout` is used  (optional). Defaults to `None`.
 |      initial_state: List of initial state tensors to be passed to the first
 |          call of the cell (optional, `None` causes creation
 |          of zero-filled initial state tensors). Defaults to `None`.
 |  
 |  Method resolution order:
 |      LSTM
 |      keras.src.layers.rnn.rnn.RNN
 |      keras.src.layers.layer.Layer
 |      keras.src.backend.tensorflow.layer.TFLayer
 |      keras.src.backend.tensorflow.trackable.KerasAutoTrackable
 |      tensorflow.python.trackable.autotrackable.AutoTrackable
 |      tensorflow.python.trackable.base.Trackable
 |      keras.src.ops.operation.Operation
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, units, activation='tanh', recurrent_activation='sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=True, kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, seed=None, return_sequences=False, return_state=False, go_backwards=False, stateful=False, unroll=False, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  call(self, sequences, initial_state=None, mask=None, training=False)
 |  
 |  get_config(self)
 |      Returns the config of the object.
 |      
 |      An object config is a Python dictionary (serializable)
 |      containing the information needed to re-instantiate it.
 |  
 |  inner_loop(self, sequences, initial_state, mask, training=False)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_config(config) from builtins.type
 |      Creates a layer from its config.
 |      
 |      This method is the reverse of `get_config`,
 |      capable of instantiating the same layer from the config
 |      dictionary. It does not handle layer connectivity
 |      (handled by Network), nor weights (handled by `set_weights`).
 |      
 |      Args:
 |          config: A Python dictionary, typically the
 |              output of get_config.
 |      
 |      Returns:
 |          A layer instance.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  activation
 |  
 |  bias_constraint
 |  
 |  bias_initializer
 |  
 |  bias_regularizer
 |  
 |  dropout
 |  
 |  kernel_constraint
 |  
 |  kernel_initializer
 |  
 |  kernel_regularizer
 |  
 |  recurrent_activation
 |  
 |  recurrent_constraint
 |  
 |  recurrent_dropout
 |  
 |  recurrent_initializer
 |  
 |  recurrent_regularizer
 |  
 |  unit_forget_bias
 |  
 |  units
 |  
 |  use_bias
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from keras.src.layers.rnn.rnn.RNN:
 |  
 |  build(self, sequences_shape, initial_state_shape=None)
 |  
 |  compute_mask(self, _, mask)
 |  
 |  compute_output_shape(self, sequences_shape, initial_state_shape=None)
 |  
 |  get_initial_state(self, batch_size)
 |  
 |  reset_state(self)
 |  
 |  reset_states(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from keras.src.layers.layer.Layer:
 |  
 |  __call__(self, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value)
 |      Support self.foo = trackable syntax.
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  add_loss(self, loss)
 |      Can be called inside of the `call()` method to add a scalar loss.
 |      
 |      Example:
 |      
 |      ```python
 |      class MyLayer(Layer):
 |          ...
 |          def call(self, x):
 |              self.add_loss(ops.sum(x))
 |              return x
 |      ```
 |  
 |  add_metric(self)
 |  
 |  add_variable(self, shape, initializer, dtype=None, trainable=True, regularizer=None, constraint=None, name=None)
 |      Add a weight variable to the layer.
 |      
 |      Alias of `add_weight()`.
 |  
 |  add_weight(self, shape=None, initializer=None, dtype=None, trainable=True, regularizer=None, constraint=None, name=None)
 |      Add a weight variable to the layer.
 |      
 |      Args:
 |          shape: Shape tuple for the variable.
 |              Must be fully-defined (no `None` entries).
 |              Defaults to `()` (scalar) if unspecified.
 |          initializer: Initializer object to use to
 |              populate the initial variable value,
 |              or string name of a built-in initializer
 |              (e.g. `"random_normal"`). If unspecified,
 |              defaults to `"glorot_uniform"`
 |              for floating-point variables and to `"zeros"`
 |              for all other types (e.g. int, bool).
 |          dtype: Dtype of the variable to create,
 |              e.g. `"float32"`. If unspecified,
 |              defaults to the layer's
 |              variable dtype (which itself defaults to
 |              `"float32"` if unspecified).
 |          trainable: Boolean, whether the variable should
 |              be trainable via backprop or whether its
 |              updates are managed manually.
 |          constraint: Contrainst object to call on the
 |              variable after any optimizer update,
 |              or string name of a built-in constraint.
 |          name: String name of the variable. Useful
 |              for debugging purposes.
 |  
 |  build_from_config(self, config)
 |      Builds the layer's states with the supplied config dict.
 |      
 |      By default, this method calls the `build(config["input_shape"])` method,
 |      which creates weights based on the layer's input shape in the supplied
 |      config. If your config contains other information needed to load the
 |      layer's state, you should override this method.
 |      
 |      Args:
 |          config: Dict containing the input shape associated with this layer.
 |  
 |  compute_output_spec(self, *args, **kwargs)
 |  
 |  count_params(self)
 |      Count the total number of scalars composing the weights.
 |      
 |      Returns:
 |          An integer count.
 |  
 |  get_build_config(self)
 |      Returns a dictionary with the layer's input shape.
 |      
 |      This method returns a config dict that can be used by
 |      `build_from_config(config)` to create all states (e.g. Variables and
 |      Lookup tables) needed by the layer.
 |      
 |      By default, the config only contains the input shape that the layer
 |      was built with. If you're writing a custom layer that creates state in
 |      an unusual way, you should override this method to make sure this state
 |      is already created when Keras attempts to load its value upon model
 |      loading.
 |      
 |      Returns:
 |          A dict containing the input shape associated with the layer.
 |  
 |  get_weights(self)
 |      Return the values of `layer.weights` as a list of NumPy arrays.
 |  
 |  load_own_variables(self, store)
 |      Loads the state of the layer.
 |      
 |      You can override this method to take full control of how the state of
 |      the layer is loaded upon calling `keras.models.load_model()`.
 |      
 |      Args:
 |          store: Dict from which the state of the model will be loaded.
 |  
 |  save_own_variables(self, store)
 |      Saves the state of the layer.
 |      
 |      You can override this method to take full control of how the state of
 |      the layer is saved upon calling `model.save()`.
 |      
 |      Args:
 |          store: Dict where the state of the model will be saved.
 |  
 |  set_weights(self, weights)
 |      Sets the values of `layer.weights` from a list of NumPy arrays.
 |  
 |  stateless_call(self, trainable_variables, non_trainable_variables, *args, return_losses=False, **kwargs)
 |      Call the layer without any side effects.
 |      
 |      Args:
 |          trainable_variables: List of trainable variables of the model.
 |          non_trainable_variables: List of non-trainable variables of the
 |              model.
 |          *args: Positional argumets to be passed to `call()`.
 |          return_losses: If `True`, `stateless_call()` will return the list of
 |              losses created during `call()` as part of its return values.
 |          **kwargs: Keyword arguments to be passed to `call()`.
 |      
 |      Returns:
 |          A tuple. By default, returns `(outputs, non_trainable_variables)`.
 |              If `return_losses = True`, then returns
 |              `(outputs, non_trainable_variables, losses)`.
 |      
 |      Note: `non_trainable_variables` include not only non-trainable weights
 |      such as `BatchNormalization` statistics, but also RNG seed state
 |      (if there are any random operations part of the layer, such as dropout),
 |      and `Metric` state (if there are any metrics attached to the layer).
 |      These are all elements of state of the layer.
 |      
 |      Example:
 |      
 |      ```python
 |      model = ...
 |      data = ...
 |      trainable_variables = model.trainable_variables
 |      non_trainable_variables = model.non_trainable_variables
 |      # Call the model with zero side effects
 |      outputs, non_trainable_variables = model.stateless_call(
 |          trainable_variables,
 |          non_trainable_variables,
 |          data,
 |      )
 |      # Attach the updated state to the model
 |      # (until you do this, the model is still in its pre-call state).
 |      for ref_var, value in zip(
 |          model.non_trainable_variables, non_trainable_variables
 |      ):
 |          ref_var.assign(value)
 |      ```
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from keras.src.layers.layer.Layer:
 |  
 |  __new__(cls, *args, **kwargs)
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from keras.src.layers.layer.Layer:
 |  
 |  compute_dtype
 |      The dtype of the computations performed by the layer.
 |  
 |  dtype
 |      Alias of `layer.variable_dtype`.
 |  
 |  input_dtype
 |      The dtype layer inputs should be converted to.
 |  
 |  losses
 |      List of scalar losses from `add_loss`, regularizers and sublayers.
 |  
 |  metrics_variables
 |      List of all metric variables.
 |  
 |  non_trainable_variables
 |      List of all non-trainable layer state.
 |      
 |      This extends `layer.non_trainable_weights` to include all state used by
 |      the layer including state for metrics and `SeedGenerator`s.
 |  
 |  non_trainable_weights
 |      List of all non-trainable weight variables of the layer.
 |      
 |      These are the weights that should not be updated by the optimizer during
 |      training. Unlike, `layer.non_trainable_variables` this excludes metric
 |      state and random seeds.
 |  
 |  trainable_variables
 |      List of all trainable layer state.
 |      
 |      This is equivalent to `layer.trainable_weights`.
 |  
 |  trainable_weights
 |      List of all trainable weight variables of the layer.
 |      
 |      These are the weights that get updated by the optimizer during training.
 |  
 |  variable_dtype
 |      The dtype of the state (weights) of the layer.
 |  
 |  variables
 |      List of all layer state, including random seeds.
 |      
 |      This extends `layer.weights` to include all state used by the layer
 |      including `SeedGenerator`s.
 |      
 |      Note that metrics variables are not included here, use
 |      `metrics_variables` to visit all the metric variables.
 |  
 |  weights
 |      List of all weight variables of the layer.
 |      
 |      Unlike, `layer.variables` this excludes metric state and random seeds.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from keras.src.layers.layer.Layer:
 |  
 |  input_spec
 |  
 |  supports_masking
 |      Whether this layer supports computing a mask using `compute_mask`.
 |  
 |  trainable
 |      Settable boolean, whether this layer should be trainable or not.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from tensorflow.python.trackable.autotrackable.AutoTrackable:
 |  
 |  __delattr__(self, name)
 |      Implement delattr(self, name).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tensorflow.python.trackable.base.Trackable:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from keras.src.ops.operation.Operation:
 |  
 |  symbolic_call(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from keras.src.ops.operation.Operation:
 |  
 |  input
 |      Retrieves the input tensor(s) of a symbolic operation.
 |      
 |      Only returns the tensor(s) corresponding to the *first time*
 |      the operation was called.
 |      
 |      Returns:
 |          Input tensor or list of input tensors.
 |  
 |  output
 |      Retrieves the output tensor(s) of a layer.
 |      
 |      Only returns the tensor(s) corresponding to the *first time*
 |      the operation was called.
 |      
 |      Returns:
 |          Output tensor or list of output tensors.

Help on class ConvLSTM3D in module keras.src.layers.rnn.conv_lstm3d:

class ConvLSTM3D(keras.src.layers.rnn.conv_lstm.ConvLSTM)
 |  ConvLSTM3D(*args, **kwargs)
 |  
 |  3D Convolutional LSTM.
 |  
 |  Similar to an LSTM layer, but the input transformations
 |  and recurrent transformations are both convolutional.
 |  
 |  Args:
 |      filters: int, the dimension of the output space (the number of filters
 |          in the convolution).
 |      kernel_size: int or tuple/list of 3 integers, specifying the size of the
 |          convolution window.
 |      strides: int or tuple/list of 3 integers, specifying the stride length
 |          of the convolution. `strides > 1` is incompatible with
 |          `dilation_rate > 1`.
 |      padding: string, `"valid"` or `"same"` (case-insensitive).
 |          `"valid"` means no padding. `"same"` results in padding evenly to
 |          the left/right or up/down of the input such that output has the same
 |          height/width dimension as the input.
 |      data_format: string, either `"channels_last"` or `"channels_first"`.
 |          The ordering of the dimensions in the inputs. `"channels_last"`
 |          corresponds to inputs with shape `(batch, steps, features)`
 |          while `"channels_first"` corresponds to inputs with shape
 |          `(batch, features, steps)`. It defaults to the `image_data_format`
 |          value found in your Keras config file at `~/.keras/keras.json`.
 |          If you never set it, then it will be `"channels_last"`.
 |      dilation_rate: int or tuple/list of 3 integers, specifying the dilation
 |          rate to use for dilated convolution.
 |      activation: Activation function to use. By default hyperbolic tangent
 |          activation function is applied (`tanh(x)`).
 |      recurrent_activation: Activation function to use for the recurrent step.
 |      use_bias: Boolean, whether the layer uses a bias vector.
 |      kernel_initializer: Initializer for the `kernel` weights matrix,
 |          used for the linear transformation of the inputs.
 |      recurrent_initializer: Initializer for the `recurrent_kernel` weights
 |          matrix, used for the linear transformation of the recurrent state.
 |      bias_initializer: Initializer for the bias vector.
 |      unit_forget_bias: Boolean. If `True`, add 1 to the bias of the forget
 |          gate at initialization.
 |          Use in combination with `bias_initializer="zeros"`.
 |          This is recommended in [Jozefowicz et al., 2015](
 |          http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf)
 |      kernel_regularizer: Regularizer function applied to the `kernel` weights
 |          matrix.
 |      recurrent_regularizer: Regularizer function applied to the
 |          `recurrent_kernel` weights matrix.
 |      bias_regularizer: Regularizer function applied to the bias vector.
 |      activity_regularizer: Regularizer function applied to.
 |      kernel_constraint: Constraint function applied to the `kernel` weights
 |          matrix.
 |      recurrent_constraint: Constraint function applied to the
 |          `recurrent_kernel` weights matrix.
 |      bias_constraint: Constraint function applied to the bias vector.
 |      dropout: Float between 0 and 1. Fraction of the units to drop for the
 |          linear transformation of the inputs.
 |      recurrent_dropout: Float between 0 and 1. Fraction of the units to drop
 |          for the linear transformation of the recurrent state.
 |      seed: Random seed for dropout.
 |      return_sequences: Boolean. Whether to return the last output
 |          in the output sequence, or the full sequence. Default: `False`.
 |      return_state: Boolean. Whether to return the last state in addition
 |          to the output. Default: `False`.
 |      go_backwards: Boolean (default: `False`).
 |          If `True`, process the input sequence backwards and return the
 |          reversed sequence.
 |      stateful: Boolean (default False). If `True`, the last state
 |          for each sample at index i in a batch will be used as initial
 |          state for the sample of index i in the following batch.
 |      unroll: Boolean (default: `False`).
 |          If `True`, the network will be unrolled,
 |          else a symbolic loop will be used.
 |          Unrolling can speed-up a RNN,
 |          although it tends to be more memory-intensive.
 |          Unrolling is only suitable for short sequences.
 |  
 |  
 |  Call arguments:
 |      inputs: A 6D tensor.
 |      mask: Binary tensor of shape `(samples, timesteps)` indicating whether a
 |          given timestep should be masked.
 |      training: Python boolean indicating whether the layer should behave in
 |          training mode or in inference mode.
 |          This is only relevant if `dropout` or `recurrent_dropout` are set.
 |      initial_state: List of initial state tensors to be passed to the first
 |          call of the cell.
 |  
 |  Input shape:
 |  
 |  - If `data_format='channels_first'`:
 |      5D tensor with shape: `(samples, time, channels, *spatial_dims)`
 |  - If `data_format='channels_last'`:
 |      5D tensor with shape: `(samples, time, *spatial_dims, channels)`
 |  
 |  Output shape:
 |  
 |  - If `return_state`: a list of tensors. The first tensor is the output.
 |      The remaining tensors are the last states,
 |      each 4D tensor with shape: `(samples, filters, *spatial_dims)` if
 |      `data_format='channels_first'`
 |      or shape: `(samples, *spatial_dims, filters)` if
 |      `data_format='channels_last'`.
 |  - If `return_sequences`: 5D tensor with shape: `(samples, timesteps,
 |      filters, *spatial_dims)` if data_format='channels_first'
 |      or shape: `(samples, timesteps, *spatial_dims, filters)` if
 |      `data_format='channels_last'`.
 |  - Else, 4D tensor with shape: `(samples, filters, *spatial_dims)` if
 |      `data_format='channels_first'`
 |      or shape: `(samples, *spatial_dims, filters)` if
 |      `data_format='channels_last'`.
 |  
 |  References:
 |  
 |  - [Shi et al., 2015](http://arxiv.org/abs/1506.04214v1)
 |      (the current implementation does not include the feedback loop on the
 |      cells output).
 |  
 |  Method resolution order:
 |      ConvLSTM3D
 |      keras.src.layers.rnn.conv_lstm.ConvLSTM
 |      keras.src.layers.rnn.rnn.RNN
 |      keras.src.layers.layer.Layer
 |      keras.src.backend.tensorflow.layer.TFLayer
 |      keras.src.backend.tensorflow.trackable.KerasAutoTrackable
 |      tensorflow.python.trackable.autotrackable.AutoTrackable
 |      tensorflow.python.trackable.base.Trackable
 |      keras.src.ops.operation.Operation
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, filters, kernel_size, strides=1, padding='valid', data_format=None, dilation_rate=1, activation='tanh', recurrent_activation='sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=True, kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, seed=None, return_sequences=False, return_state=False, go_backwards=False, stateful=False, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from keras.src.layers.rnn.conv_lstm.ConvLSTM:
 |  
 |  call(self, sequences, initial_state=None, mask=None, training=False)
 |  
 |  compute_mask(self, _, mask)
 |  
 |  compute_output_shape(self, sequences_shape, initial_state_shape=None)
 |  
 |  get_config(self)
 |      Returns the config of the object.
 |      
 |      An object config is a Python dictionary (serializable)
 |      containing the information needed to re-instantiate it.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from keras.src.layers.rnn.conv_lstm.ConvLSTM:
 |  
 |  from_config(config) from builtins.type
 |      Creates a layer from its config.
 |      
 |      This method is the reverse of `get_config`,
 |      capable of instantiating the same layer from the config
 |      dictionary. It does not handle layer connectivity
 |      (handled by Network), nor weights (handled by `set_weights`).
 |      
 |      Args:
 |          config: A Python dictionary, typically the
 |              output of get_config.
 |      
 |      Returns:
 |          A layer instance.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from keras.src.layers.rnn.conv_lstm.ConvLSTM:
 |  
 |  activation
 |  
 |  bias_constraint
 |  
 |  bias_initializer
 |  
 |  bias_regularizer
 |  
 |  data_format
 |  
 |  dilation_rate
 |  
 |  dropout
 |  
 |  filters
 |  
 |  kernel_constraint
 |  
 |  kernel_initializer
 |  
 |  kernel_regularizer
 |  
 |  kernel_size
 |  
 |  padding
 |  
 |  recurrent_activation
 |  
 |  recurrent_constraint
 |  
 |  recurrent_dropout
 |  
 |  recurrent_initializer
 |  
 |  recurrent_regularizer
 |  
 |  strides
 |  
 |  unit_forget_bias
 |  
 |  use_bias
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from keras.src.layers.rnn.rnn.RNN:
 |  
 |  build(self, sequences_shape, initial_state_shape=None)
 |  
 |  get_initial_state(self, batch_size)
 |  
 |  inner_loop(self, sequences, initial_state, mask, training=False)
 |  
 |  reset_state(self)
 |  
 |  reset_states(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from keras.src.layers.layer.Layer:
 |  
 |  __call__(self, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value)
 |      Support self.foo = trackable syntax.
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  add_loss(self, loss)
 |      Can be called inside of the `call()` method to add a scalar loss.
 |      
 |      Example:
 |      
 |      ```python
 |      class MyLayer(Layer):
 |          ...
 |          def call(self, x):
 |              self.add_loss(ops.sum(x))
 |              return x
 |      ```
 |  
 |  add_metric(self)
 |  
 |  add_variable(self, shape, initializer, dtype=None, trainable=True, regularizer=None, constraint=None, name=None)
 |      Add a weight variable to the layer.
 |      
 |      Alias of `add_weight()`.
 |  
 |  add_weight(self, shape=None, initializer=None, dtype=None, trainable=True, regularizer=None, constraint=None, name=None)
 |      Add a weight variable to the layer.
 |      
 |      Args:
 |          shape: Shape tuple for the variable.
 |              Must be fully-defined (no `None` entries).
 |              Defaults to `()` (scalar) if unspecified.
 |          initializer: Initializer object to use to
 |              populate the initial variable value,
 |              or string name of a built-in initializer
 |              (e.g. `"random_normal"`). If unspecified,
 |              defaults to `"glorot_uniform"`
 |              for floating-point variables and to `"zeros"`
 |              for all other types (e.g. int, bool).
 |          dtype: Dtype of the variable to create,
 |              e.g. `"float32"`. If unspecified,
 |              defaults to the layer's
 |              variable dtype (which itself defaults to
 |              `"float32"` if unspecified).
 |          trainable: Boolean, whether the variable should
 |              be trainable via backprop or whether its
 |              updates are managed manually.
 |          constraint: Contrainst object to call on the
 |              variable after any optimizer update,
 |              or string name of a built-in constraint.
 |          name: String name of the variable. Useful
 |              for debugging purposes.
 |  
 |  build_from_config(self, config)
 |      Builds the layer's states with the supplied config dict.
 |      
 |      By default, this method calls the `build(config["input_shape"])` method,
 |      which creates weights based on the layer's input shape in the supplied
 |      config. If your config contains other information needed to load the
 |      layer's state, you should override this method.
 |      
 |      Args:
 |          config: Dict containing the input shape associated with this layer.
 |  
 |  compute_output_spec(self, *args, **kwargs)
 |  
 |  count_params(self)
 |      Count the total number of scalars composing the weights.
 |      
 |      Returns:
 |          An integer count.
 |  
 |  get_build_config(self)
 |      Returns a dictionary with the layer's input shape.
 |      
 |      This method returns a config dict that can be used by
 |      `build_from_config(config)` to create all states (e.g. Variables and
 |      Lookup tables) needed by the layer.
 |      
 |      By default, the config only contains the input shape that the layer
 |      was built with. If you're writing a custom layer that creates state in
 |      an unusual way, you should override this method to make sure this state
 |      is already created when Keras attempts to load its value upon model
 |      loading.
 |      
 |      Returns:
 |          A dict containing the input shape associated with the layer.
 |  
 |  get_weights(self)
 |      Return the values of `layer.weights` as a list of NumPy arrays.
 |  
 |  load_own_variables(self, store)
 |      Loads the state of the layer.
 |      
 |      You can override this method to take full control of how the state of
 |      the layer is loaded upon calling `keras.models.load_model()`.
 |      
 |      Args:
 |          store: Dict from which the state of the model will be loaded.
 |  
 |  save_own_variables(self, store)
 |      Saves the state of the layer.
 |      
 |      You can override this method to take full control of how the state of
 |      the layer is saved upon calling `model.save()`.
 |      
 |      Args:
 |          store: Dict where the state of the model will be saved.
 |  
 |  set_weights(self, weights)
 |      Sets the values of `layer.weights` from a list of NumPy arrays.
 |  
 |  stateless_call(self, trainable_variables, non_trainable_variables, *args, return_losses=False, **kwargs)
 |      Call the layer without any side effects.
 |      
 |      Args:
 |          trainable_variables: List of trainable variables of the model.
 |          non_trainable_variables: List of non-trainable variables of the
 |              model.
 |          *args: Positional argumets to be passed to `call()`.
 |          return_losses: If `True`, `stateless_call()` will return the list of
 |              losses created during `call()` as part of its return values.
 |          **kwargs: Keyword arguments to be passed to `call()`.
 |      
 |      Returns:
 |          A tuple. By default, returns `(outputs, non_trainable_variables)`.
 |              If `return_losses = True`, then returns
 |              `(outputs, non_trainable_variables, losses)`.
 |      
 |      Note: `non_trainable_variables` include not only non-trainable weights
 |      such as `BatchNormalization` statistics, but also RNG seed state
 |      (if there are any random operations part of the layer, such as dropout),
 |      and `Metric` state (if there are any metrics attached to the layer).
 |      These are all elements of state of the layer.
 |      
 |      Example:
 |      
 |      ```python
 |      model = ...
 |      data = ...
 |      trainable_variables = model.trainable_variables
 |      non_trainable_variables = model.non_trainable_variables
 |      # Call the model with zero side effects
 |      outputs, non_trainable_variables = model.stateless_call(
 |          trainable_variables,
 |          non_trainable_variables,
 |          data,
 |      )
 |      # Attach the updated state to the model
 |      # (until you do this, the model is still in its pre-call state).
 |      for ref_var, value in zip(
 |          model.non_trainable_variables, non_trainable_variables
 |      ):
 |          ref_var.assign(value)
 |      ```
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from keras.src.layers.layer.Layer:
 |  
 |  __new__(cls, *args, **kwargs)
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from keras.src.layers.layer.Layer:
 |  
 |  compute_dtype
 |      The dtype of the computations performed by the layer.
 |  
 |  dtype
 |      Alias of `layer.variable_dtype`.
 |  
 |  input_dtype
 |      The dtype layer inputs should be converted to.
 |  
 |  losses
 |      List of scalar losses from `add_loss`, regularizers and sublayers.
 |  
 |  metrics_variables
 |      List of all metric variables.
 |  
 |  non_trainable_variables
 |      List of all non-trainable layer state.
 |      
 |      This extends `layer.non_trainable_weights` to include all state used by
 |      the layer including state for metrics and `SeedGenerator`s.
 |  
 |  non_trainable_weights
 |      List of all non-trainable weight variables of the layer.
 |      
 |      These are the weights that should not be updated by the optimizer during
 |      training. Unlike, `layer.non_trainable_variables` this excludes metric
 |      state and random seeds.
 |  
 |  trainable_variables
 |      List of all trainable layer state.
 |      
 |      This is equivalent to `layer.trainable_weights`.
 |  
 |  trainable_weights
 |      List of all trainable weight variables of the layer.
 |      
 |      These are the weights that get updated by the optimizer during training.
 |  
 |  variable_dtype
 |      The dtype of the state (weights) of the layer.
 |  
 |  variables
 |      List of all layer state, including random seeds.
 |      
 |      This extends `layer.weights` to include all state used by the layer
 |      including `SeedGenerator`s.
 |      
 |      Note that metrics variables are not included here, use
 |      `metrics_variables` to visit all the metric variables.
 |  
 |  weights
 |      List of all weight variables of the layer.
 |      
 |      Unlike, `layer.variables` this excludes metric state and random seeds.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from keras.src.layers.layer.Layer:
 |  
 |  input_spec
 |  
 |  supports_masking
 |      Whether this layer supports computing a mask using `compute_mask`.
 |  
 |  trainable
 |      Settable boolean, whether this layer should be trainable or not.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from tensorflow.python.trackable.autotrackable.AutoTrackable:
 |  
 |  __delattr__(self, name)
 |      Implement delattr(self, name).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tensorflow.python.trackable.base.Trackable:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from keras.src.ops.operation.Operation:
 |  
 |  symbolic_call(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from keras.src.ops.operation.Operation:
 |  
 |  input
 |      Retrieves the input tensor(s) of a symbolic operation.
 |      
 |      Only returns the tensor(s) corresponding to the *first time*
 |      the operation was called.
 |      
 |      Returns:
 |          Input tensor or list of input tensors.
 |  
 |  output
 |      Retrieves the output tensor(s) of a layer.
 |      
 |      Only returns the tensor(s) corresponding to the *first time*
 |      the operation was called.
 |      
 |      Returns:
 |          Output tensor or list of output tensors.

Help on class GRU in module keras.src.layers.rnn.gru:

class GRU(keras.src.layers.rnn.rnn.RNN)
 |  GRU(*args, **kwargs)
 |  
 |  Gated Recurrent Unit - Cho et al. 2014.
 |  
 |  Based on available runtime hardware and constraints, this layer
 |  will choose different implementations (cuDNN-based or backend-native)
 |  to maximize the performance. If a GPU is available and all
 |  the arguments to the layer meet the requirement of the cuDNN kernel
 |  (see below for details), the layer will use a fast cuDNN implementation
 |  when using the TensorFlow backend.
 |  
 |  The requirements to use the cuDNN implementation are:
 |  
 |  1. `activation` == `tanh`
 |  2. `recurrent_activation` == `sigmoid`
 |  3. `dropout` == 0 and `recurrent_dropout` == 0
 |  4. `unroll` is `False`
 |  5. `use_bias` is `True`
 |  6. `reset_after` is `True`
 |  7. Inputs, if use masking, are strictly right-padded.
 |  8. Eager execution is enabled in the outermost context.
 |  
 |  There are two variants of the GRU implementation. The default one is based
 |  on [v3](https://arxiv.org/abs/1406.1078v3) and has reset gate applied to
 |  hidden state before matrix multiplication. The other one is based on
 |  [original](https://arxiv.org/abs/1406.1078v1) and has the order reversed.
 |  
 |  The second variant is compatible with CuDNNGRU (GPU-only) and allows
 |  inference on CPU. Thus it has separate biases for `kernel` and
 |  `recurrent_kernel`. To use this variant, set `reset_after=True` and
 |  `recurrent_activation='sigmoid'`.
 |  
 |  For example:
 |  
 |  >>> inputs = np.random.random((32, 10, 8))
 |  >>> gru = keras.layers.GRU(4)
 |  >>> output = gru(inputs)
 |  >>> output.shape
 |  (32, 4)
 |  >>> gru = keras.layers.GRU(4, return_sequences=True, return_state=True)
 |  >>> whole_sequence_output, final_state = gru(inputs)
 |  >>> whole_sequence_output.shape
 |  (32, 10, 4)
 |  >>> final_state.shape
 |  (32, 4)
 |  
 |  Args:
 |      units: Positive integer, dimensionality of the output space.
 |      activation: Activation function to use.
 |          Default: hyperbolic tangent (`tanh`).
 |          If you pass `None`, no activation is applied
 |          (ie. "linear" activation: `a(x) = x`).
 |      recurrent_activation: Activation function to use
 |          for the recurrent step.
 |          Default: sigmoid (`sigmoid`).
 |          If you pass `None`, no activation is applied
 |          (ie. "linear" activation: `a(x) = x`).
 |      use_bias: Boolean, (default `True`), whether the layer
 |          should use a bias vector.
 |      kernel_initializer: Initializer for the `kernel` weights matrix,
 |          used for the linear transformation of the inputs. Default:
 |          `"glorot_uniform"`.
 |      recurrent_initializer: Initializer for the `recurrent_kernel`
 |          weights matrix, used for the linear transformation of the recurrent
 |          state. Default: `"orthogonal"`.
 |      bias_initializer: Initializer for the bias vector. Default: `"zeros"`.
 |      kernel_regularizer: Regularizer function applied to the `kernel` weights
 |          matrix. Default: `None`.
 |      recurrent_regularizer: Regularizer function applied to the
 |          `recurrent_kernel` weights matrix. Default: `None`.
 |      bias_regularizer: Regularizer function applied to the bias vector.
 |          Default: `None`.
 |      activity_regularizer: Regularizer function applied to the output of the
 |          layer (its "activation"). Default: `None`.
 |      kernel_constraint: Constraint function applied to the `kernel` weights
 |          matrix. Default: `None`.
 |      recurrent_constraint: Constraint function applied to the
 |          `recurrent_kernel` weights matrix. Default: `None`.
 |      bias_constraint: Constraint function applied to the bias vector.
 |          Default: `None`.
 |      dropout: Float between 0 and 1. Fraction of the units to drop for the
 |          linear transformation of the inputs. Default: 0.
 |      recurrent_dropout: Float between 0 and 1. Fraction of the units to drop
 |          for the linear transformation of the recurrent state. Default: 0.
 |      seed: Random seed for dropout.
 |      return_sequences: Boolean. Whether to return the last output
 |          in the output sequence, or the full sequence. Default: `False`.
 |      return_state: Boolean. Whether to return the last state in addition
 |          to the output. Default: `False`.
 |      go_backwards: Boolean (default `False`).
 |          If `True`, process the input sequence backwards and return the
 |          reversed sequence.
 |      stateful: Boolean (default: `False`). If `True`, the last state
 |          for each sample at index i in a batch will be used as initial
 |          state for the sample of index i in the following batch.
 |      unroll: Boolean (default: `False`).
 |          If `True`, the network will be unrolled,
 |          else a symbolic loop will be used.
 |          Unrolling can speed-up a RNN,
 |          although it tends to be more memory-intensive.
 |          Unrolling is only suitable for short sequences.
 |      reset_after: GRU convention (whether to apply reset gate after or
 |          before matrix multiplication). `False` is `"before"`,
 |          `True` is `"after"` (default and cuDNN compatible).
 |  
 |  Call arguments:
 |      inputs: A 3D tensor, with shape `(batch, timesteps, feature)`.
 |      mask: Binary tensor of shape `(samples, timesteps)` indicating whether
 |          a given timestep should be masked  (optional).
 |          An individual `True` entry indicates that the corresponding timestep
 |          should be utilized, while a `False` entry indicates that the
 |          corresponding timestep should be ignored. Defaults to `None`.
 |      training: Python boolean indicating whether the layer should behave in
 |          training mode or in inference mode. This argument is passed to the
 |          cell when calling it. This is only relevant if `dropout` or
 |          `recurrent_dropout` is used  (optional). Defaults to `None`.
 |      initial_state: List of initial state tensors to be passed to the first
 |          call of the cell (optional, `None` causes creation
 |          of zero-filled initial state tensors). Defaults to `None`.
 |  
 |  Method resolution order:
 |      GRU
 |      keras.src.layers.rnn.rnn.RNN
 |      keras.src.layers.layer.Layer
 |      keras.src.backend.tensorflow.layer.TFLayer
 |      keras.src.backend.tensorflow.trackable.KerasAutoTrackable
 |      tensorflow.python.trackable.autotrackable.AutoTrackable
 |      tensorflow.python.trackable.base.Trackable
 |      keras.src.ops.operation.Operation
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, units, activation='tanh', recurrent_activation='sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, seed=None, return_sequences=False, return_state=False, go_backwards=False, stateful=False, unroll=False, reset_after=True, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  call(self, sequences, initial_state=None, mask=None, training=False)
 |  
 |  get_config(self)
 |      Returns the config of the object.
 |      
 |      An object config is a Python dictionary (serializable)
 |      containing the information needed to re-instantiate it.
 |  
 |  inner_loop(self, sequences, initial_state, mask, training=False)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_config(config) from builtins.type
 |      Creates a layer from its config.
 |      
 |      This method is the reverse of `get_config`,
 |      capable of instantiating the same layer from the config
 |      dictionary. It does not handle layer connectivity
 |      (handled by Network), nor weights (handled by `set_weights`).
 |      
 |      Args:
 |          config: A Python dictionary, typically the
 |              output of get_config.
 |      
 |      Returns:
 |          A layer instance.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  activation
 |  
 |  bias_constraint
 |  
 |  bias_initializer
 |  
 |  bias_regularizer
 |  
 |  dropout
 |  
 |  kernel_constraint
 |  
 |  kernel_initializer
 |  
 |  kernel_regularizer
 |  
 |  recurrent_activation
 |  
 |  recurrent_constraint
 |  
 |  recurrent_dropout
 |  
 |  recurrent_initializer
 |  
 |  recurrent_regularizer
 |  
 |  reset_after
 |  
 |  units
 |  
 |  use_bias
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from keras.src.layers.rnn.rnn.RNN:
 |  
 |  build(self, sequences_shape, initial_state_shape=None)
 |  
 |  compute_mask(self, _, mask)
 |  
 |  compute_output_shape(self, sequences_shape, initial_state_shape=None)
 |  
 |  get_initial_state(self, batch_size)
 |  
 |  reset_state(self)
 |  
 |  reset_states(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from keras.src.layers.layer.Layer:
 |  
 |  __call__(self, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value)
 |      Support self.foo = trackable syntax.
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  add_loss(self, loss)
 |      Can be called inside of the `call()` method to add a scalar loss.
 |      
 |      Example:
 |      
 |      ```python
 |      class MyLayer(Layer):
 |          ...
 |          def call(self, x):
 |              self.add_loss(ops.sum(x))
 |              return x
 |      ```
 |  
 |  add_metric(self)
 |  
 |  add_variable(self, shape, initializer, dtype=None, trainable=True, regularizer=None, constraint=None, name=None)
 |      Add a weight variable to the layer.
 |      
 |      Alias of `add_weight()`.
 |  
 |  add_weight(self, shape=None, initializer=None, dtype=None, trainable=True, regularizer=None, constraint=None, name=None)
 |      Add a weight variable to the layer.
 |      
 |      Args:
 |          shape: Shape tuple for the variable.
 |              Must be fully-defined (no `None` entries).
 |              Defaults to `()` (scalar) if unspecified.
 |          initializer: Initializer object to use to
 |              populate the initial variable value,
 |              or string name of a built-in initializer
 |              (e.g. `"random_normal"`). If unspecified,
 |              defaults to `"glorot_uniform"`
 |              for floating-point variables and to `"zeros"`
 |              for all other types (e.g. int, bool).
 |          dtype: Dtype of the variable to create,
 |              e.g. `"float32"`. If unspecified,
 |              defaults to the layer's
 |              variable dtype (which itself defaults to
 |              `"float32"` if unspecified).
 |          trainable: Boolean, whether the variable should
 |              be trainable via backprop or whether its
 |              updates are managed manually.
 |          constraint: Contrainst object to call on the
 |              variable after any optimizer update,
 |              or string name of a built-in constraint.
 |          name: String name of the variable. Useful
 |              for debugging purposes.
 |  
 |  build_from_config(self, config)
 |      Builds the layer's states with the supplied config dict.
 |      
 |      By default, this method calls the `build(config["input_shape"])` method,
 |      which creates weights based on the layer's input shape in the supplied
 |      config. If your config contains other information needed to load the
 |      layer's state, you should override this method.
 |      
 |      Args:
 |          config: Dict containing the input shape associated with this layer.
 |  
 |  compute_output_spec(self, *args, **kwargs)
 |  
 |  count_params(self)
 |      Count the total number of scalars composing the weights.
 |      
 |      Returns:
 |          An integer count.
 |  
 |  get_build_config(self)
 |      Returns a dictionary with the layer's input shape.
 |      
 |      This method returns a config dict that can be used by
 |      `build_from_config(config)` to create all states (e.g. Variables and
 |      Lookup tables) needed by the layer.
 |      
 |      By default, the config only contains the input shape that the layer
 |      was built with. If you're writing a custom layer that creates state in
 |      an unusual way, you should override this method to make sure this state
 |      is already created when Keras attempts to load its value upon model
 |      loading.
 |      
 |      Returns:
 |          A dict containing the input shape associated with the layer.
 |  
 |  get_weights(self)
 |      Return the values of `layer.weights` as a list of NumPy arrays.
 |  
 |  load_own_variables(self, store)
 |      Loads the state of the layer.
 |      
 |      You can override this method to take full control of how the state of
 |      the layer is loaded upon calling `keras.models.load_model()`.
 |      
 |      Args:
 |          store: Dict from which the state of the model will be loaded.
 |  
 |  save_own_variables(self, store)
 |      Saves the state of the layer.
 |      
 |      You can override this method to take full control of how the state of
 |      the layer is saved upon calling `model.save()`.
 |      
 |      Args:
 |          store: Dict where the state of the model will be saved.
 |  
 |  set_weights(self, weights)
 |      Sets the values of `layer.weights` from a list of NumPy arrays.
 |  
 |  stateless_call(self, trainable_variables, non_trainable_variables, *args, return_losses=False, **kwargs)
 |      Call the layer without any side effects.
 |      
 |      Args:
 |          trainable_variables: List of trainable variables of the model.
 |          non_trainable_variables: List of non-trainable variables of the
 |              model.
 |          *args: Positional argumets to be passed to `call()`.
 |          return_losses: If `True`, `stateless_call()` will return the list of
 |              losses created during `call()` as part of its return values.
 |          **kwargs: Keyword arguments to be passed to `call()`.
 |      
 |      Returns:
 |          A tuple. By default, returns `(outputs, non_trainable_variables)`.
 |              If `return_losses = True`, then returns
 |              `(outputs, non_trainable_variables, losses)`.
 |      
 |      Note: `non_trainable_variables` include not only non-trainable weights
 |      such as `BatchNormalization` statistics, but also RNG seed state
 |      (if there are any random operations part of the layer, such as dropout),
 |      and `Metric` state (if there are any metrics attached to the layer).
 |      These are all elements of state of the layer.
 |      
 |      Example:
 |      
 |      ```python
 |      model = ...
 |      data = ...
 |      trainable_variables = model.trainable_variables
 |      non_trainable_variables = model.non_trainable_variables
 |      # Call the model with zero side effects
 |      outputs, non_trainable_variables = model.stateless_call(
 |          trainable_variables,
 |          non_trainable_variables,
 |          data,
 |      )
 |      # Attach the updated state to the model
 |      # (until you do this, the model is still in its pre-call state).
 |      for ref_var, value in zip(
 |          model.non_trainable_variables, non_trainable_variables
 |      ):
 |          ref_var.assign(value)
 |      ```
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from keras.src.layers.layer.Layer:
 |  
 |  __new__(cls, *args, **kwargs)
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from keras.src.layers.layer.Layer:
 |  
 |  compute_dtype
 |      The dtype of the computations performed by the layer.
 |  
 |  dtype
 |      Alias of `layer.variable_dtype`.
 |  
 |  input_dtype
 |      The dtype layer inputs should be converted to.
 |  
 |  losses
 |      List of scalar losses from `add_loss`, regularizers and sublayers.
 |  
 |  metrics_variables
 |      List of all metric variables.
 |  
 |  non_trainable_variables
 |      List of all non-trainable layer state.
 |      
 |      This extends `layer.non_trainable_weights` to include all state used by
 |      the layer including state for metrics and `SeedGenerator`s.
 |  
 |  non_trainable_weights
 |      List of all non-trainable weight variables of the layer.
 |      
 |      These are the weights that should not be updated by the optimizer during
 |      training. Unlike, `layer.non_trainable_variables` this excludes metric
 |      state and random seeds.
 |  
 |  trainable_variables
 |      List of all trainable layer state.
 |      
 |      This is equivalent to `layer.trainable_weights`.
 |  
 |  trainable_weights
 |      List of all trainable weight variables of the layer.
 |      
 |      These are the weights that get updated by the optimizer during training.
 |  
 |  variable_dtype
 |      The dtype of the state (weights) of the layer.
 |  
 |  variables
 |      List of all layer state, including random seeds.
 |      
 |      This extends `layer.weights` to include all state used by the layer
 |      including `SeedGenerator`s.
 |      
 |      Note that metrics variables are not included here, use
 |      `metrics_variables` to visit all the metric variables.
 |  
 |  weights
 |      List of all weight variables of the layer.
 |      
 |      Unlike, `layer.variables` this excludes metric state and random seeds.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from keras.src.layers.layer.Layer:
 |  
 |  input_spec
 |  
 |  supports_masking
 |      Whether this layer supports computing a mask using `compute_mask`.
 |  
 |  trainable
 |      Settable boolean, whether this layer should be trainable or not.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from tensorflow.python.trackable.autotrackable.AutoTrackable:
 |  
 |  __delattr__(self, name)
 |      Implement delattr(self, name).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tensorflow.python.trackable.base.Trackable:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from keras.src.ops.operation.Operation:
 |  
 |  symbolic_call(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from keras.src.ops.operation.Operation:
 |  
 |  input
 |      Retrieves the input tensor(s) of a symbolic operation.
 |      
 |      Only returns the tensor(s) corresponding to the *first time*
 |      the operation was called.
 |      
 |      Returns:
 |          Input tensor or list of input tensors.
 |  
 |  output
 |      Retrieves the output tensor(s) of a layer.
 |      
 |      Only returns the tensor(s) corresponding to the *first time*
 |      the operation was called.
 |      
 |      Returns:
 |          Output tensor or list of output tensors.

Help on class Layer in module keras.src.layers.layer:

class Layer(keras.src.backend.tensorflow.layer.TFLayer, keras.src.ops.operation.Operation)
 |  Layer(*args, **kwargs)
 |  
 |  This is the class from which all layers inherit.
 |  
 |  A layer is a callable object that takes as input one or more tensors and
 |  that outputs one or more tensors. It involves *computation*, defined
 |  in the `call()` method, and a *state* (weight variables). State can be
 |  created:
 |  
 |  * in `__init__()`, for instance via `self.add_weight()`;
 |  * in the optional `build()` method, which is invoked by the first
 |    `__call__()` to the layer, and supplies the shape(s) of the input(s),
 |    which may not have been known at initialization time.
 |  
 |  Layers are recursively composable: If you assign a Layer instance as an
 |  attribute of another Layer, the outer layer will start tracking the weights
 |  created by the inner layer. Nested layers should be instantiated in the
 |  `__init__()` method or `build()` method.
 |  
 |  Users will just instantiate a layer and then treat it as a callable.
 |  
 |  Args:
 |      trainable: Boolean, whether the layer's variables should be trainable.
 |      name: String name of the layer.
 |      dtype: The dtype of the layer's computations and weights. Can also be a
 |          `keras.DTypePolicy`,
 |          which allows the computation and
 |          weight dtype to differ. Defaults to `None`. `None` means to use
 |          `keras.config.dtype_policy()`,
 |          which is a `float32` policy unless set to different value
 |          (via `keras.config.set_dtype_policy()`).
 |  
 |  Attributes:
 |      name: The name of the layer (string).
 |      dtype: Dtype of the layer's weights. Alias of `layer.variable_dtype`.
 |      variable_dtype: Dtype of the layer's weights.
 |      compute_dtype: The dtype of the layer's computations.
 |          Layers automatically cast inputs to this dtype, which causes
 |          the computations and output to also be in this dtype.
 |          When mixed precision is used with a
 |          `keras.DTypePolicy`, this will be different
 |          than `variable_dtype`.
 |      trainable_weights: List of variables to be included in backprop.
 |      non_trainable_weights: List of variables that should not be
 |          included in backprop.
 |      weights: The concatenation of the lists trainable_weights and
 |          non_trainable_weights (in this order).
 |      trainable: Whether the layer should be trained (boolean), i.e.
 |          whether its potentially-trainable weights should be returned
 |          as part of `layer.trainable_weights`.
 |      input_spec: Optional (list of) `InputSpec` object(s) specifying the
 |          constraints on inputs that can be accepted by the layer.
 |  
 |  We recommend that descendants of `Layer` implement the following methods:
 |  
 |  * `__init__()`: Defines custom layer attributes, and creates layer weights
 |      that do not depend on input shapes, using `add_weight()`,
 |      or other state.
 |  * `build(self, input_shape)`: This method can be used to create weights that
 |      depend on the shape(s) of the input(s), using `add_weight()`, or other
 |      state. `__call__()` will automatically build the layer
 |      (if it has not been built yet) by calling `build()`.
 |  * `call(self, *args, **kwargs)`: Called in `__call__` after making
 |      sure `build()` has been called. `call()` performs the logic of applying
 |      the layer to the input arguments.
 |      Two reserved keyword arguments you can optionally use in `call()` are:
 |          1. `training` (boolean, whether the call is in inference mode or
 |              training mode).
 |          2. `mask` (boolean tensor encoding masked timesteps in the input,
 |              used e.g. in RNN layers).
 |      A typical signature for this method is `call(self, inputs)`, and user
 |      could optionally add `training` and `mask` if the layer need them.
 |  * `get_config(self)`: Returns a dictionary containing the configuration
 |      used to initialize this layer. If the keys differ from the arguments
 |      in `__init__()`, then override `from_config(self)` as well.
 |      This method is used when saving
 |      the layer or a model that contains this layer.
 |  
 |  Examples:
 |  
 |  Here's a basic example: a layer with two variables, `w` and `b`,
 |  that returns `y = w . x + b`.
 |  It shows how to implement `build()` and `call()`.
 |  Variables set as attributes of a layer are tracked as weights
 |  of the layers (in `layer.weights`).
 |  
 |  ```python
 |  class SimpleDense(Layer):
 |      def __init__(self, units=32):
 |          super().__init__()
 |          self.units = units
 |  
 |      # Create the state of the layer (weights)
 |      def build(self, input_shape):
 |          self.kernel = self.add_weight(
 |              shape=(input_shape[-1], self.units),
 |              initializer="glorot_uniform",
 |              trainable=True,
 |              name="kernel",
 |          )
 |          self.bias = self.add_weight(
 |              shape=(self.units,),
 |              initializer="zeros",
 |              trainable=True,
 |              name="bias",
 |          )
 |  
 |      # Defines the computation
 |      def call(self, inputs):
 |          return ops.matmul(inputs, self.kernel) + self.bias
 |  
 |  # Instantiates the layer.
 |  linear_layer = SimpleDense(4)
 |  
 |  # This will also call `build(input_shape)` and create the weights.
 |  y = linear_layer(ops.ones((2, 2)))
 |  assert len(linear_layer.weights) == 2
 |  
 |  # These weights are trainable, so they're listed in `trainable_weights`:
 |  assert len(linear_layer.trainable_weights) == 2
 |  ```
 |  
 |  Besides trainable weights, updated via backpropagation during training,
 |  layers can also have non-trainable weights. These weights are meant to
 |  be updated manually during `call()`. Here's a example layer that computes
 |  the running sum of its inputs:
 |  
 |  ```python
 |  class ComputeSum(Layer):
 |  
 |    def __init__(self, input_dim):
 |        super(ComputeSum, self).__init__()
 |        # Create a non-trainable weight.
 |        self.total = self.add_weight(
 |          shape=(),
 |          initializer="zeros",
 |          trainable=False,
 |          name="total",
 |        )
 |  
 |    def call(self, inputs):
 |        self.total.assign(self.total + ops.sum(inputs))
 |        return self.total
 |  
 |  my_sum = ComputeSum(2)
 |  x = ops.ones((2, 2))
 |  y = my_sum(x)
 |  
 |  assert my_sum.weights == [my_sum.total]
 |  assert my_sum.non_trainable_weights == [my_sum.total]
 |  assert my_sum.trainable_weights == []
 |  ```
 |  
 |  Method resolution order:
 |      Layer
 |      keras.src.backend.tensorflow.layer.TFLayer
 |      keras.src.backend.tensorflow.trackable.KerasAutoTrackable
 |      tensorflow.python.trackable.autotrackable.AutoTrackable
 |      tensorflow.python.trackable.base.Trackable
 |      keras.src.ops.operation.Operation
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __call__(self, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __init__(self, *, activity_regularizer=None, trainable=True, dtype=None, autocast=True, name=None, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value)
 |      Support self.foo = trackable syntax.
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  add_loss(self, loss)
 |      Can be called inside of the `call()` method to add a scalar loss.
 |      
 |      Example:
 |      
 |      ```python
 |      class MyLayer(Layer):
 |          ...
 |          def call(self, x):
 |              self.add_loss(ops.sum(x))
 |              return x
 |      ```
 |  
 |  add_metric(self)
 |  
 |  add_variable(self, shape, initializer, dtype=None, trainable=True, regularizer=None, constraint=None, name=None)
 |      Add a weight variable to the layer.
 |      
 |      Alias of `add_weight()`.
 |  
 |  add_weight(self, shape=None, initializer=None, dtype=None, trainable=True, regularizer=None, constraint=None, name=None)
 |      Add a weight variable to the layer.
 |      
 |      Args:
 |          shape: Shape tuple for the variable.
 |              Must be fully-defined (no `None` entries).
 |              Defaults to `()` (scalar) if unspecified.
 |          initializer: Initializer object to use to
 |              populate the initial variable value,
 |              or string name of a built-in initializer
 |              (e.g. `"random_normal"`). If unspecified,
 |              defaults to `"glorot_uniform"`
 |              for floating-point variables and to `"zeros"`
 |              for all other types (e.g. int, bool).
 |          dtype: Dtype of the variable to create,
 |              e.g. `"float32"`. If unspecified,
 |              defaults to the layer's
 |              variable dtype (which itself defaults to
 |              `"float32"` if unspecified).
 |          trainable: Boolean, whether the variable should
 |              be trainable via backprop or whether its
 |              updates are managed manually.
 |          constraint: Contrainst object to call on the
 |              variable after any optimizer update,
 |              or string name of a built-in constraint.
 |          name: String name of the variable. Useful
 |              for debugging purposes.
 |  
 |  build(self, input_shape)
 |  
 |  build_from_config(self, config)
 |      Builds the layer's states with the supplied config dict.
 |      
 |      By default, this method calls the `build(config["input_shape"])` method,
 |      which creates weights based on the layer's input shape in the supplied
 |      config. If your config contains other information needed to load the
 |      layer's state, you should override this method.
 |      
 |      Args:
 |          config: Dict containing the input shape associated with this layer.
 |  
 |  call(self, *args, **kwargs)
 |  
 |  compute_mask(self, inputs, previous_mask)
 |  
 |  compute_output_shape(self, *args, **kwargs)
 |  
 |  compute_output_spec(self, *args, **kwargs)
 |  
 |  count_params(self)
 |      Count the total number of scalars composing the weights.
 |      
 |      Returns:
 |          An integer count.
 |  
 |  get_build_config(self)
 |      Returns a dictionary with the layer's input shape.
 |      
 |      This method returns a config dict that can be used by
 |      `build_from_config(config)` to create all states (e.g. Variables and
 |      Lookup tables) needed by the layer.
 |      
 |      By default, the config only contains the input shape that the layer
 |      was built with. If you're writing a custom layer that creates state in
 |      an unusual way, you should override this method to make sure this state
 |      is already created when Keras attempts to load its value upon model
 |      loading.
 |      
 |      Returns:
 |          A dict containing the input shape associated with the layer.
 |  
 |  get_config(self)
 |      Returns the config of the object.
 |      
 |      An object config is a Python dictionary (serializable)
 |      containing the information needed to re-instantiate it.
 |  
 |  get_weights(self)
 |      Return the values of `layer.weights` as a list of NumPy arrays.
 |  
 |  load_own_variables(self, store)
 |      Loads the state of the layer.
 |      
 |      You can override this method to take full control of how the state of
 |      the layer is loaded upon calling `keras.models.load_model()`.
 |      
 |      Args:
 |          store: Dict from which the state of the model will be loaded.
 |  
 |  save_own_variables(self, store)
 |      Saves the state of the layer.
 |      
 |      You can override this method to take full control of how the state of
 |      the layer is saved upon calling `model.save()`.
 |      
 |      Args:
 |          store: Dict where the state of the model will be saved.
 |  
 |  set_weights(self, weights)
 |      Sets the values of `layer.weights` from a list of NumPy arrays.
 |  
 |  stateless_call(self, trainable_variables, non_trainable_variables, *args, return_losses=False, **kwargs)
 |      Call the layer without any side effects.
 |      
 |      Args:
 |          trainable_variables: List of trainable variables of the model.
 |          non_trainable_variables: List of non-trainable variables of the
 |              model.
 |          *args: Positional argumets to be passed to `call()`.
 |          return_losses: If `True`, `stateless_call()` will return the list of
 |              losses created during `call()` as part of its return values.
 |          **kwargs: Keyword arguments to be passed to `call()`.
 |      
 |      Returns:
 |          A tuple. By default, returns `(outputs, non_trainable_variables)`.
 |              If `return_losses = True`, then returns
 |              `(outputs, non_trainable_variables, losses)`.
 |      
 |      Note: `non_trainable_variables` include not only non-trainable weights
 |      such as `BatchNormalization` statistics, but also RNG seed state
 |      (if there are any random operations part of the layer, such as dropout),
 |      and `Metric` state (if there are any metrics attached to the layer).
 |      These are all elements of state of the layer.
 |      
 |      Example:
 |      
 |      ```python
 |      model = ...
 |      data = ...
 |      trainable_variables = model.trainable_variables
 |      non_trainable_variables = model.non_trainable_variables
 |      # Call the model with zero side effects
 |      outputs, non_trainable_variables = model.stateless_call(
 |          trainable_variables,
 |          non_trainable_variables,
 |          data,
 |      )
 |      # Attach the updated state to the model
 |      # (until you do this, the model is still in its pre-call state).
 |      for ref_var, value in zip(
 |          model.non_trainable_variables, non_trainable_variables
 |      ):
 |          ref_var.assign(value)
 |      ```
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(cls, *args, **kwargs)
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  compute_dtype
 |      The dtype of the computations performed by the layer.
 |  
 |  dtype
 |      Alias of `layer.variable_dtype`.
 |  
 |  input_dtype
 |      The dtype layer inputs should be converted to.
 |  
 |  losses
 |      List of scalar losses from `add_loss`, regularizers and sublayers.
 |  
 |  metrics_variables
 |      List of all metric variables.
 |  
 |  non_trainable_variables
 |      List of all non-trainable layer state.
 |      
 |      This extends `layer.non_trainable_weights` to include all state used by
 |      the layer including state for metrics and `SeedGenerator`s.
 |  
 |  non_trainable_weights
 |      List of all non-trainable weight variables of the layer.
 |      
 |      These are the weights that should not be updated by the optimizer during
 |      training. Unlike, `layer.non_trainable_variables` this excludes metric
 |      state and random seeds.
 |  
 |  trainable_variables
 |      List of all trainable layer state.
 |      
 |      This is equivalent to `layer.trainable_weights`.
 |  
 |  trainable_weights
 |      List of all trainable weight variables of the layer.
 |      
 |      These are the weights that get updated by the optimizer during training.
 |  
 |  variable_dtype
 |      The dtype of the state (weights) of the layer.
 |  
 |  variables
 |      List of all layer state, including random seeds.
 |      
 |      This extends `layer.weights` to include all state used by the layer
 |      including `SeedGenerator`s.
 |      
 |      Note that metrics variables are not included here, use
 |      `metrics_variables` to visit all the metric variables.
 |  
 |  weights
 |      List of all weight variables of the layer.
 |      
 |      Unlike, `layer.variables` this excludes metric state and random seeds.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  input_spec
 |  
 |  supports_masking
 |      Whether this layer supports computing a mask using `compute_mask`.
 |  
 |  trainable
 |      Settable boolean, whether this layer should be trainable or not.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from tensorflow.python.trackable.autotrackable.AutoTrackable:
 |  
 |  __delattr__(self, name)
 |      Implement delattr(self, name).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tensorflow.python.trackable.base.Trackable:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from keras.src.ops.operation.Operation:
 |  
 |  symbolic_call(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from keras.src.ops.operation.Operation:
 |  
 |  from_config(config) from builtins.type
 |      Creates a layer from its config.
 |      
 |      This method is the reverse of `get_config`,
 |      capable of instantiating the same layer from the config
 |      dictionary. It does not handle layer connectivity
 |      (handled by Network), nor weights (handled by `set_weights`).
 |      
 |      Args:
 |          config: A Python dictionary, typically the
 |              output of get_config.
 |      
 |      Returns:
 |          A layer instance.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from keras.src.ops.operation.Operation:
 |  
 |  input
 |      Retrieves the input tensor(s) of a symbolic operation.
 |      
 |      Only returns the tensor(s) corresponding to the *first time*
 |      the operation was called.
 |      
 |      Returns:
 |          Input tensor or list of input tensors.
 |  
 |  output
 |      Retrieves the output tensor(s) of a layer.
 |      
 |      Only returns the tensor(s) corresponding to the *first time*
 |      the operation was called.
 |      
 |      Returns:
 |          Output tensor or list of output tensors.

